{\rtf1\ansi\ansicpg1252\cocoartf2509
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;\f2\froman\fcharset0 Times-Italic;
\f3\froman\fcharset0 Times-Bold;\f4\fnil\fcharset0 HelveticaNeue;\f5\fnil\fcharset0 HelveticaNeue-Italic;
\f6\fnil\fcharset0 Menlo-Regular;\f7\fswiss\fcharset0 ArialMT;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue233;\red0\green0\blue233;
\red27\green31\blue34;\red255\green255\blue255;\red21\green23\blue26;\red27\green29\blue31;\red235\green236\blue237;
}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c0\c0\c93333;\cssrgb\c0\c0\c93333;
\cssrgb\c14118\c16078\c18039;\cssrgb\c100000\c100000\c100000;\cssrgb\c10588\c12157\c13725\c4706;\cssrgb\c14118\c15294\c16078;\cssrgb\c93725\c94118\c94510;
}
\margl1440\margr1440\vieww16600\viewh9300\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Angr\
\
# Installation\
1. virtualenv  /tmp/MyEnv\
2. source /tmp/MyEnv/bin/activate \

\f1 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 3.  sudo apt-get install python3-dev libffi-dev build-essential virtualenvwrapper\
\
Src: {\field{\*\fldinst{HYPERLINK "https://docs.angr.io/introductory-errata/install"}}{\fldrslt \cf3 \ul \ulc3 \strokec3 https://docs.angr.io/introductory-errata/install}}\cf3 \ul \ulc3 \strokec3 \
\
\
\cf2 \ulnone # Scripting Setup:\
>>>Import angr\
>>>Proj = angr.Project(\'91fauxware\'92)\
>>> p.arch\
<Arch AMD64 (LE)>\
>>> p.entry\
0x400580\
>>> p.filename\
'fauxware'\
>>> p.loader\
<Loaded fauxware, maps [0x400000:0x5008000]>\
>>> p.loader.shared_objects\
\{'fauxware': <ELF Object fauxware, maps [0x400000:0x60105f]>,\
 u'libc.so.6': <ELF Object libc-2.27.so, maps [0x1000000:0x13f0adf]>,\
 u'ld-linux-x86-64.so.2': <ELF Object ld-2.27.so, maps [0x2000000:0x222916f]>\}\
>>> p.loader.min_addr\
0x400000\
>>> p.loader.max_addr\
0x5008000\
>>> p.loader.main_object.execstack\
False\
>>> p.loader.main_object.pic\
False\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \outl0\strokewidth0 ANGR INTRO start\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\cf2 \outl0\strokewidth0 \strokec3 # The factory\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf2 Allows you to pass certain parts of the project around instead of the entire project, AFTER instantiation. \
\
## Blocks\
Extracts a basic code block \'97 fyi, Angr analyzes code in units of basic blocks.\
\
In [11]: block = proj.factory.block(proj.entry)\
In [12]: block.pp() # pretty-print a disassembly to stdout\
\
## States\
\pard\pardeftab720\sl360\partightenfactor0
\cf2 When you\'92re performing execution with Angr, you are working with a specific object representing a 
\f2\i simulated program
\f1\i0  state - a 
\f3\b SimState
\f1\b0 . \
In [15]: state = proj.factory.entry_state()\
In [17]: state.regs.rax\
Out[17]: <BV64 0x1c>\
In [18]: state.mem[proj.entry].int.resolved # note these are 
\f2\i bitvectors
\f1\i0 , not actual integers. \
Out[18]: <BV32 0x8949ed31> # Use 
\f2\i resolved
\f1\i0  for bitvector and 
\f2\i concrete
\f1\i0  for python int\
\
Note:\
In [19]: state.regs.rdi\
Out[19]: <BV64 reg_rdi_0_64\{UNINITIALIZED\}>\
\pard\pardeftab720\sl360\partightenfactor0

\f4\fs32 \cf5 \cb6 \strokec5 Doesn't contain a numerical value. Instead, it has a name! This is called a\'a0
\f5\i symbolic variable
\f4\i0 \'a0and it is the underpinning of symbolic execution
\f1\fs24 \cf2 \cb1 \strokec3 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf2 ## Simulation Manager\
Let\'92s us get to the next point in a simulated program.\
\pard\pardeftab720\sl360\partightenfactor0

\f4\fs32 \cf5 \cb6 \strokec5 \'a0the primary interface in angr for performing execution, simulation, whatever you want to call it, with states.\
In [20]: simgr = proj.factory.simulation_manager(state)\
\
In [21]: simgr.active\
Out[21]: [<SimState @ 0x400580>]\
\
A simulation manager can contain several\'a0
\f5\i stashes
\f4\i0 \'a0of states. The default stash,\'a0
\f6\fs27\fsmilli13600 \cb7 active
\f4\fs32 \cb6 , is initialized with the state we passed in. We could look at\'a0
\f6\fs27\fsmilli13600 \cb7 simgr.active[0]
\f4\fs32 \cb6 \'a0to look at our state some more, if we haven't had enough!\
\
## Analyses\
proj.analyses.\{tab\} # in ipython\
proj.analyses.CFGFast() # Control Flow Graph\
\
\pard\pardeftab720\sl360\partightenfactor0

\f1\fs24 \cf2 \cb1 \strokec3 ANGR INTRO end\cf2 \outl0\strokewidth0 \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\cf2 \outl0\strokewidth0 \strokec3 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf2 \
# Ipython trick - save current session\
\pard\pardeftab720\sl300\partightenfactor0

\f6\fs26 \cf8 \cb9 \strokec8 %save my_useful_session 10-20 23
\f7\fs30 \cb6 \'a0to save input lines 10 to 20 and 23 to\'a0
\f6\fs26 \cb9 my_useful_session.py
\f1\fs24 \cf2 \cb1 \strokec3 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \ul \ulc3 src: {\field{\*\fldinst{HYPERLINK "https://stackoverflow.com/questions/947810/how-to-save-a-python-interactive-session"}}{\fldrslt https://stackoverflow.com/questions/947810/how-to-save-a-python-interactive-session}}}